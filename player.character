// Ability class
class Ability {
public:
    virtual void Execute() = 0;
    // Other common methods and attributes for abilities
};

// Attack ability class
class AttackAbility : public Ability {
public:
    void Execute() override {
        // Implementation for attack ability
        // ...
    }
    // Additional methods and attributes specific to attack abilities
};

// Defense ability class
class DefenseAbility : public Ability {
public:
    void Execute() override {
        // Implementation for defense ability
        // ...
    }
    // Additional methods and attributes specific to defense abilities
};

// Character class
class Character {
public:
    Character(const std::string& name, int health, int strength)
        : name(name), health(health), strength(strength) {}

    void AddAbility(Ability* ability) {
        abilities.push_back(ability);
    }

    void ExecuteAbility(int index) {
        if (index >= 0 && index < abilities.size()) {
            abilities[index]->Execute();
        }
    }

    // Getters and setters for attributes
    // ...

private:
    std::string name;
    int health;
    int strength;
    std::vector<Ability*> abilities;
};

// PlayerCharacter derived from Character
class PlayerCharacter : public Character {
public:
    PlayerCharacter(const std::string& name, int health, int strength)
        : Character(name, health, strength) {}

    // Additional methods and attributes specific to PlayerCharacter
    // ...
};

// EnemyCharacter derived from Character
class EnemyCharacter : public Character {
public:
    EnemyCharacter(const std::string& name, int health, int strength)
        : Character(name, health, strength) {}

    // Additional methods and attributes specific to EnemyCharacter
    // ...
};

int main() {
    PlayerCharacter player("Player", 100, 10);
    EnemyCharacter enemy("Enemy", 200, 15);

    Ability* attackAbility = new AttackAbility();
    Ability* defenseAbility = new DefenseAbility();

    player.AddAbility(attackAbility);
    enemy.AddAbility(defenseAbility);

    // Execute abilities
    player.ExecuteAbility(0);
    enemy.ExecuteAbility(0);

    // ...

    // Cleanup
    delete attackAbility;
    delete defenseAbility;

    return 0;
}

#include <iostream>#include <string>#include <SFML/Graphics.hpp>
class Character {
public:
    Character(const std::string& name, const sf::Vector2f& position, const sf::Vector2f& size)
        : name(name), position(position), size(size) {}

    void Move(float offsetX, float offsetY) {
        position.x += offsetX;
        position.y += offsetY;
    }

    bool CheckCollision(const Character& other) const {
        sf::FloatRect playerBounds(position, size);
        sf::FloatRect otherBounds(other.position, other.size);
        return playerBounds.intersects(otherBounds);
    }

    const std::string& GetName() const { return name; }
    const sf::Vector2f& GetPosition() const { return position; }
    const sf::Vector2f& GetSize() const { return size; }

private:
    std::string name;
    sf::Vector2f position;
    sf::Vector2f size;
};

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Character Movement & Collision Detection");
    sf::Clock clock;

    Character player("Player", sf::Vector2f(100.0f, 100.0f), sf::Vector2f(50.0f, 50.0f));
    Character enemy("Enemy", sf::Vector2f(300.0f, 200.0f), sf::Vector2f(50.0f, 50.0f));

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        float deltaTime = clock.restart().asSeconds();

        // Handle player character movement
        float moveSpeed = 100.0f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left))
            player.Move(-moveSpeed * deltaTime, 0.0f);
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
            player.Move(moveSpeed * deltaTime, 0.0f);
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
            player.Move(0.0f, -moveSpeed * deltaTime);
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down))
            player.Move(0.0f, moveSpeed * deltaTime);

        if (player.CheckCollision(enemy)) {
            std::cout << "Collision detected between Player and Enemy!" << std::endl;
        }

        window.clear(sf::Color::White);

        // Render the player character
        sf::RectangleShape playerRect(player.GetSize());
        playerRect.setPosition(player.GetPosition());
        playerRect.setFillColor(sf::Color::Green);
        window.draw(playerRect);

        // Render the enemy character
        sf::RectangleShape enemyRect(enemy.GetSize());
        enemyRect.setPosition(enemy.GetPosition());
        enemyRect.setFillColor(sf::Color::Red);
        window.draw(enemyRect);

        window.display();
    }

    return 0;
}

#include <iostream>#include <string>#include <SFML/Graphics.hpp>

class Character {
public:
    Character(const std::string& name, const sf::Vector2f& position, const sf::Vector2f& size)
        : name(name), position(position), size(size) {}

    void Move(float offsetX, float offsetY) {
        position.x += offsetX;
        position.y += offsetY;
    }

    // Other methods and attributes for character behavior
    // ...

private:
    std::string name;
    sf::Vector2f position;
    sf::Vector2f size;
};

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Player Input & Interaction");
    sf::Clock clock;

    Character player("Player", sf::Vector2f(100.0f, 100.0f), sf::Vector2f(50.0f, 50.0f));

    // Game loop
    while (window.isOpen()) {
        // Event handling
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Calculate delta time for smooth movement
        float deltaTime = clock.restart().asSeconds();

        // Player character movement
        float moveSpeed = 100.0f; // Adjust movement speed as needed
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left))
            player.Move(-moveSpeed * deltaTime, 0.0f);
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
            player.Move(moveSpeed * deltaTime, 0.0f);
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
            player.Move(0.0f, -moveSpeed * deltaTime);
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down))
            player.Move(0.0f, moveSpeed * deltaTime);

        // Player interactions
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space)) {
            std::cout << "Player interacted!" << std::endl;
            // Handle player interaction
            // ...
        }

        // Rendering
        window.clear(sf::Color::White);
        sf::RectangleShape playerRect(player.GetSize());
        playerRect.setPosition(player.GetPosition());
        playerRect.setFillColor(sf::Color::Green);
        window.draw(playerRect);
        window.display();
    }

    return 0;
}


